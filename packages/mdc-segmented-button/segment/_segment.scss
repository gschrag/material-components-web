//
// Copyright 2020 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

// Core: Define complete styles to render component segment, including base and theme styles

// TODO: is it ok to use mdc-button?
@use "@material/button";
@use "@material/theme/variables" as theme-variables;
@use "@material/feature-targeting/functions" as feature-targeting-functions;
@use "@material/feature-targeting/mixins" as feature-targeting-mixins;
@use "@material/typography/mixins" as typography-mixins;
@use './segment-theme';

@mixin core-styles($query: feature-targeting-functions.all()) {
  // TODO: include test for element resizing besides the left/right border
  .mdc-segmented-button__segment {
    @include base_($query);

    // Style for when element is selected
    .mdc-segmented-button__segment--selected {
      @include selected_($query);
    }

    // Style for when element is unselected
    &:not(.mdc-segmented-button__segment--selected) {
      @include unselected_($query);
    }
  }

  .mdc-segmented-button__icon {
    @include icon_($query);
  }

  .mdc-segmented-button__icon + .mdc-segmented-button__label {
    @include label_($query);
  }

  .mdc-segmented-button--touch {
    //TODO
  }

  .mdc-segmented-button__ripple {
    //TODO
  }

  .mdc-segmented-button__touch {
    //TODO
  }
}

@mixin base_($query) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $feat-typography: feature-targeting-functions.create-target(
    $query,
    typography
  );

  @include typography-mixins.typography(button, $feat-typography);

  @include feature-targeting-mixins.targets($feat-structure) {
    height: 36px;
    min-width: 48px;
    padding: 0px;
    padding-left: 12px;
    padding-right: 12px;
    // Mimicking mdc-button and mdc-button--outlined
    border-width: 1px;
    vertical-align: top;
    display: inline-flex;
    align-items: center;

    &:hover {
      cursor: pointer;
    }

    // TODO: verify that this is still needed
    &:focus {
      outline-width: 0;
    }

    // TODO: this CSS doesn't work if the buttons are wrapped by divs
    &:first-child {
      border-top-left-radius: 4px;
      border-bottom-left-radius: 4px;
    }

    &:last-child {
      border-bottom-right-radius: 4px;
      border-top-right-radius: 4px;
    }    
  }
}

@mixin unselected_($query) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  // TODO: move these @includes into a *-theme.scss mixin
  @include button.ink-color(
    rgba(theme-variables.prop-value(on-surface), 0.6),
    $query
  );
  @include button.outline-color(
    rgba(theme-variables.prop-value(on-surface), 0.12),
    $query
  );
  @include button.container-fill-color(
    rgba(theme-variables.prop-value(surface), 1),
    $query
  );

  @include feature-targeting-mixins.targets($feat-structure) {
    // Avoids double borders
    &:not(:last-child) {
      border-right: hidden;
    }
  }
}

@mixin selected_($query) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  
  // TODO: move these @includes into a *-theme.scss mixin
  @include button.ink-color(
    rgba(theme-variables.prop-value(primary), 1),
    $query
  );
  @include button.outline-color(
    rgba(theme-variables.prop-value(primary), 1),
    $query
  );
  @include button.container-fill-color(
    rgba(theme-variables.prop-value(primary), 0.08),
    $query
  );

  @include feature-targeting-mixins.targets($feat-structure) {
    // Avoids double borders
    +.mdc-segmented-button__segment {
      border-left: hidden;
    }
  }
}

@mixin icon_($query) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $feat-typography: feature-targeting-functions.create-target(
    $query,
    typography
  );

  @include feature-targeting-mixins.targets($feat-structure) {
    width: 24px;
  }
  @include feature-targeting-mixins.targets($feat-typography) {
    font-size: 18px;
  }
}

@mixin label_($query) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include feature-targeting-mixins.targets($feat-structure) {
    padding-left: 6;
  }
}

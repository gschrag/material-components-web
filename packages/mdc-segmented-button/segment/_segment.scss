//
// Copyright 2020 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

// Core: Define complete styles to render component segment, including base and theme styles

@use "@material/button";
@use "@material/feature-targeting/functions" as feature-targeting-functions;
@use "@material/feature-targeting/mixins" as feature-targeting-mixins;
@use './segment-theme';

@mixin core-styles($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  // TODO: include test for element resizing besides the left/right border
  .mdc-segmented-button__segment {
    @include segment-theme.base($query);
    @include unselected($query);

    // Style for when element is selected
    .mdc-segmented-button__segment--selected {
      @include selected($query);

      // Avoids double borders
      + .mdc-segmented-button__segment {
        @include feature-targeting-mixins.targets($feat-structure) {
          border-left: hidden;
        }
      }
    }

    &:hover {
      @include feature-targeting-mixins.targets($feat-structure) {
        cursor: pointer;
      }
    }

    // TODO: verify that this is still needed (cancels ripple focus border)
    &:focus {
      @include feature-targeting-mixins.targets($feat-structure) {
        outline-width: 0;
      }
    }

    // TODO: this CSS doesn't work if the buttons are wrapped by divs
    &:first-child {
      @include feature-targeting-mixins.targets($feat-structure) {
        border-radius: segment-theme.$border-radius 0px 0px
          segment-theme.$border-radius;
      }
    }

    &:last-child {
      @include feature-targeting-mixins.targets($feat-structure) {
        border-right: visible;
        border-radius: 0px segment-theme.$border-radius
          segment-theme.$border-radius 0px;
      }
    }
  }

  .mdc-segmented-button__icon {
    @include icon($query);
  }

  .mdc-segmented-button__icon + .mdc-segmented-button__label {
    @include label($query);
  }

  .mdc-segmented-button--touch {
    //TODO
  }

  .mdc-segmented-button__ripple {
    //TODO
  }

  .mdc-segmented-button__touch {
    //TODO
  }
}

@mixin unselected($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include button.ink-color(segment-theme.$unselected-ink-color, $query);
  @include button.outline-color(
    segment-theme.$unselected-outline-color,
    $query
  );
  @include button.container-fill-color(
    segment-theme.$unselected-container-fill-color,
    $query
  );

  // Avoids double borders
  @include feature-targeting-mixins.targets($feat-structure) {
    border-right: hidden;
  }
}

@mixin selected($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include button.ink-color(segment-theme.$selected-ink-color, $query);
  @include button.outline-color(segment-theme.$selected-outline-color, $query);
  @include button.container-fill-color(
    segment-theme.$selected-container-fill-color,
    $query
  );

  // Avoids double borders
  @include feature-targeting-mixins.targets($feat-structure) {
    border-right: visible;
  }
}

@mixin icon($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $feat-typography: feature-targeting-functions.create-target(
    $query,
    typography
  );

  @include feature-targeting-mixins.targets($feat-structure) {
    width: segment-theme.$icon-width;
  }
  @include feature-targeting-mixins.targets($feat-typography) {
    font-size: segment-theme.$icon-font-size;
  }
}

@mixin label($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include feature-targeting-mixins.targets($feat-structure) {
    padding-left: segment-theme.$label-padding;
  }
}
